#0 building with "default" instance using docker driver

#1 [internal] load build definition from Dockerfile
#1 transferring dockerfile: 5.77kB done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [internal] load metadata for docker.io/library/ubuntu:22.04
#3 DONE 1.7s

#4 [ 1/12] FROM docker.io/library/ubuntu:22.04@sha256:2b7412e6465c3c7fc5bb21d3e6f1917c167358449fecac8176c6e496e5c1f05f
#4 DONE 0.0s

#5 [ 4/12] RUN groupadd -r -g 92 frr &&       groupadd -r -g 85 frrvty &&       adduser --system --ingroup frr --home /home/frr               --gecos "FRR suite" --shell /bin/bash frr &&       usermod -a -G frrvty frr &&       useradd -d /var/run/exabgp/ -s /bin/false exabgp &&       echo 'frr ALL = NOPASSWD: ALL' | tee /etc/sudoers.d/frr &&       mkdir -p /home/frr && chown frr.frr /home/frr
#5 CACHED

#6 [ 7/12] RUN cd && pwd && ls -al && git clone https://github.com/FRRouting/frr.git
#6 CACHED

#7 [ 9/12] RUN if [ "interested" = "full" ]; then     echo "Building full project..." &&     cd /home/frr/frr &&     ./bootstrap.sh &&     ./configure        --prefix=/usr        --localstatedir=/var/run/frr        --sbindir=/usr/lib/frr        --sysconfdir=/etc/frr        --enable-sharpd        --enable-multipath=64        --enable-user=frr        --enable-group=frr        --enable-config-rollbacks        --enable-vty-group=frrvty        --enable-snmp=agentx        --enable-scripting        --enable-address-sanitizer        --with-pkg-extra-version=-my-manual-build &&     make -j $(nproc) &&     sudo make install  ;  else     echo "Building interested project part..." ;     cd /home/frr/frr &&     ./bootstrap.sh &&     ./configure        --prefix=/usr        --localstatedir=/var/run/frr        --sbindir=/usr/lib/frr        --sysconfdir=/etc/frr        --enable-sharpd        --enable-multipath=64        --enable-user=frr        --enable-group=frr        --enable-config-rollbacks        --enable-vty-group=frrvty        --enable-snmp=agentx        --enable-scripting        --enable-address-sanitizer        --disable-doc        --disable-ripd        --disable-ripngd        --disable-ldpd        --disable-nhrpd        --disable-eigrpd        --disable-babeld        --disable-pimd        --disable-pim6d        --disable-pbrd        --disable-staticd         --disable-fabricd         --disable-vrrpd         --disable-pathd        --with-pkg-extra-version=-my-manual-build &&     make -j $(nproc) &&     sudo make install ;   fi
#7 CACHED

#8 [ 2/12] RUN echo 114.212.85.76:9981
#8 CACHED

#9 [ 3/12] RUN apt update && apt upgrade -y &&     apt-get install -y             curl             autoconf             automake             bison             build-essential             flex             git             install-info             libc-ares-dev             libcap-dev             libelf-dev             libjson-c-dev             libpam0g-dev             libreadline-dev             libsnmp-dev             libsqlite3-dev             libtool             make             perl             pkg-config             python3-dev             python3-sphinx             texinfo     &&     apt-get install -y         libprotobuf-c-dev         protobuf-c-compiler     &&     apt-get install -y         cmake         libpcre2-dev     &&     apt-get install -y         curl         gdb         iproute2         iputils-ping         liblua5.3-dev         libssl-dev         lua5.3         net-tools         python2         python3-pip         snmp         snmp-mibs-downloader         snmpd         sudo         time         tshark         valgrind         yodl       &&     download-mibs &&     wget https://raw.githubusercontent.com/FRRouting/frr-mibs/main/iana/IANA-IPPM-METRICS-REGISTRY-MIB -O /usr/share/snmp/mibs/iana/IANA-IPPM-METRICS-REGISTRY-MIB &&     wget https://raw.githubusercontent.com/FRRouting/frr-mibs/main/ietf/SNMPv2-PDU -O /usr/share/snmp/mibs/ietf/SNMPv2-PDU &&     wget https://raw.githubusercontent.com/FRRouting/frr-mibs/main/ietf/IPATM-IPMC-MIB -O /usr/share/snmp/mibs/ietf/IPATM-IPMC-MIB &&     curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output /tmp/get-pip.py &&     python2 /tmp/get-pip.py &&     rm -f  /tmp/get-pip.py &&     python3 -m pip install wheel &&     python3 -m pip install pytest &&     python3 -m pip install pytest-sugar &&     python3 -m pip install pytest-xdist &&     python3 -m pip install "scapy>=2.4.2" &&     python3 -m pip install xmltodict &&     python3 -m pip install grpcio grpcio-tools &&     python2 -m pip install 'exabgp<4.0.0'
#9 CACHED

#10 [ 5/12] RUN cd && pwd && ls -al && git clone https://github.com/mininet/mininet &&     cd /home/frr/mininet &&     sudo util/install.sh -nfv
#10 CACHED

#11 [ 6/12] RUN cd && pwd && ls -al &&     git clone https://github.com/CESNET/libyang.git &&     cd libyang &&     git checkout v2.1.80 &&     mkdir build; cd build &&     cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr           -DCMAKE_BUILD_TYPE:String="Release" .. &&     make -j $(nproc) &&     sudo make install
#11 CACHED

#12 [ 8/12] RUN cd /home/frr/frr &&     git checkout -f ${commit}
#12 CACHED

#13 [10/12] RUN if ["false" == "true"]; then     cd /home/frr/frr && make check || true && make clean; else     cd /home/frr/frr && make clean;fi
#13 CACHED

#14 [internal] load build context
#14 transferring context: 34B done
#14 DONE 0.0s

#15 [11/12] COPY ../LICENSE /home/frr/topo-fuzz/
#15 ERROR: failed to calculate checksum of ref MKJX:ZLTD:P4M2:XE6L:AHAP:X4EN:WIHN:CZJJ:BOJG:BUZP:5HVC:QMCW::druuav6ep3x2ccu6sq69215gq: "/LICENSE": not found
------
 > [11/12] COPY ../LICENSE /home/frr/topo-fuzz/:
------
Dockerfile:192
--------------------
 190 |     
 191 |     #copy topo-fuzz to /home/frr/topo-fuzz
 192 | >>> COPY ../LICENSE /home/frr/topo-fuzz/
 193 |     
 194 |     #copy docker-start
--------------------
ERROR: failed to solve: failed to compute cache key: failed to calculate checksum of ref MKJX:ZLTD:P4M2:XE6L:AHAP:X4EN:WIHN:CZJJ:BOJG:BUZP:5HVC:QMCW::druuav6ep3x2ccu6sq69215gq: "/LICENSE": not found
